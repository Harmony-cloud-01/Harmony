#!/usr/bin/env python3
"""
Validate presence of core Codex folders/files:
- Codex/Axioms/
- Codex/Laws/
- Codex/Glyphs/
- Codex/Theories/ (seven core theories: SDFT, SPRC, RCT, TRT, SPM, Echoverse, RRM)

Usage:
  python3 scripts/validate_codex_layout.py
  python3 scripts/validate_codex_layout.py --json
  python3 scripts/validate_codex_layout.py --create-stubs
"""
import argparse, json, sys
from pathlib import Path
from datetime import datetime, timezone

ROOT = Path(".")
CODEX = ROOT / "Codex"

# Expected directories
DIRS = [
    CODEX / "Axioms",
    CODEX / "Laws",
    CODEX / "Glyphs",
    CODEX / "Theories",
]

# Seven core theories (allow md/yaml/yml variants)
THEORIES = {
    "SDFT":        ["SDFT.md", "SDFT.yaml", "SDFT.yml"],
    "SPRC":        ["SPRC.md", "SPRC.yaml", "SPRC.yml"],  # (formerly PRC)
    "RCT":         ["RCT.md", "RCT.yaml", "RCT.yml"],
    "TRT":         ["TRT.md", "TRT.yaml", "TRT.yml"],
    "SPM":         ["SPM.md", "SPM.yaml", "SPM.yml"],
    "Echoverse":   ["Echoverse.md", "Echoverse.yaml", "Echoverse.yml"],
    "RRM":         ["RRM.md", "RRM.yaml", "RRM.yml"],
}

# Simple presence checks for key categories (at least one file)
CATEGORY_GLOBS = {
    "Axioms":  ["*.md", "*.yaml", "*.yml"],
    "Laws":    ["*.md", "*.yaml", "*.yml"],
    "Glyphs":  ["*.md", "*.yaml", "*.yml"],
}

STUB_CONTENT = {
    "theory": lambda name: f"""# {name} — CHRS v2.1

> Stub generated {datetime.now(timezone.utc).isoformat()}

## Synopsis
(TBD) Formal write-up for {name} in the Seven Core Theories stack.

## Interfaces
- Inputs: TBD
- Outputs: TBD
- Metrics: TBD

## Notes
This is an autogenerated placeholder. Replace with the latest reviewed content.
""",
    "axioms": "# Axioms (stub)\n\nAdd axioms here.\n",
    "laws":   "# Laws (stub)\n\nAdd symbolic laws here.\n",
    "glyphs": "# Glyphs (stub)\n\nAdd glyph definitions/mappings here.\n",
}

def ensure_dir(p: Path):
    p.mkdir(parents=True, exist_ok=True)

def any_exists(dirpath: Path, patterns):
    for pat in patterns:
        if any(dirpath.glob(pat)):
            return True
    return False

def find_first_existing(dirpath: Path, candidates):
    for name in candidates:
        p = dirpath / name
        if p.exists():
            return p
    return None

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--json", action="store_true", help="Emit JSON result")
    ap.add_argument("--create-stubs", action="store_true", help="Create missing directories/files as stubs")
    args = ap.parse_args()

    result = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "root": str(ROOT.resolve()),
        "dirs": {},
        "theories": {},
        "summary": {"ok": True, "missing": []}
    }

    # Check directories
    for d in DIRS:
        exists = d.exists()
        result["dirs"][str(d)] = exists
        if not exists:
            result["summary"]["ok"] = False
            result["summary"]["missing"].append(str(d))
            if args.create_stubs:
                ensure_dir(d)

    # Category presence checks
    for cat, globs in CATEGORY_GLOBS.items():
        d = CODEX / cat
        present = d.exists() and any_exists(d, globs)
        result["dirs"][f"{d}/*"] = present
        if not present:
            result["summary"]["ok"] = False
            result["summary"]["missing"].append(f"{d}/*")
            if args.create_stubs:
                ensure_dir(d)
                # drop a stub only if directory empty
                if not any(d.iterdir()):
                    stub_file = d / "README.md"
                    stub_file.write_text(STUB_CONTENT[cat.lower()], encoding="utf-8")

    # Theory files
    tdir = CODEX / "Theories"
    ensure_dir(tdir) if args.create_stubs else None

    for key, candidates in THEORIES.items():
        p = find_first_existing(tdir, candidates)
        status = {"present": p is not None, "path": str(p) if p else None, "candidates": candidates}
        if p is None:
            result["summary"]["ok"] = False
            result["summary"]["missing"].append(f"{tdir}/{candidates[0]} (or variant)")
            if args.create_stubs:
                # default to .md stub
                target = tdir / candidates[0]
                target.write_text(STUB_CONTENT["theory"](key), encoding="utf-8")
                status = {"present": True, "path": str(target), "candidates": candidates, "created_stub": True}
        result["theories"][key] = status

    # Output
    if args.json:
        print(json.dumps(result, indent=2))
        return

    # Human-readable
    print("== Codex layout validation ==")
    for d, ok in result["dirs"].items():
        print(f"[{'OK' if ok else 'MISS'}] {d}")

    print("\n-- Seven Core Theories --")
    for k, st in result["theories"].items():
        tag = "OK " if st["present"] else "MISS"
        print(f"[{tag}] {k:10s} -> {st.get('path') or 'missing'}")

    if result["summary"]["ok"]:
        print("\nAll required folders/files are present. ✅")
    else:
        print("\nMissing items:")
        for m in result["summary"]["missing"]:
            print(f" - {m}")
        print("\nTip: run with --create-stubs to scaffold placeholders.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(130)
