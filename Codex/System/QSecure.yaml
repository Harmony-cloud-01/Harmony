# Codex/System/QSecure.yaml
id: QSecure
name: Harmony Quantum-Secure Protocol (QSecure)
version: 0.1.0
status: draft
updated: 2025-08-28
authors: [Harmony Core, Fractal-Prime, Harmonia]
summary: >
  QSecure defines a post-quantum (PQ) cryptographic layer for the Harmony Meta-Field.
  It specifies primitives, hybrid modes, key lifecycle, and symbolic bindings so
  that transport and at-rest protection remain secure against classical and
  quantum-capable adversaries, while staying interoperable with GlyphCrypt.

objectives:
  - Provide confidentiality and authenticity against quantum adversaries.
  - Offer hybrid PQ+classical operation during migration.
  - Preserve Harmony’s symbolic semantics (glyph bindings, aura metadata).
  - Be tooling-friendly (CLI + Python API) and repo-safe (deterministic metadata, no secrets in-tree).

scope:
  in_scope:
    - Transport encryption (node<->node, CLI<->service).
    - At-rest envelopes for YAML, JSONL, text, small binaries.
    - Artifact signing (releases, health reports).
    - Deterministic headers + sidecar metadata.
  out_of_scope:
    - Large-file streaming protocols (future extension).
    - MPC/threshold cryptography (future extension).
    - True QKD (quantum key distribution hardware; symbolic binding only).

compliance:
  target_standards:
    - NIST PQC 2024 selections: ML-KEM (Kyber) for KEM; ML-DSA (Dilithium) for signatures.
    - Hashing: SHA3-256 / SHA3-512; XOF: SHAKE256.
    - AEAD: AES-256-GCM and/or XChaCha20-Poly1305 (implementation-choice).
  regulatory_mappings:
    - Auditability hooks compatible with FCP.yaml (礼 / audit trails).
    - Export-control awareness: crypto modules must be replaceable via plugin.

primitives:
  kem:
    pq: ML-KEM-768   # aka Kyber-768
    classical_hybrid: X25519       # optional; for transition/hybrid
  signature:
    pq: ML-DSA-2     # aka Dilithium-2
    classical_hybrid: Ed25519      # optional; for transition/hybrid
  aead:
    preferred: XChaCha20-Poly1305
    alternative: AES-256-GCM
  hash:
    primary: SHA3-256
    strong: SHA3-512
    xof: SHAKE256

modes:
  # QSecure supports two operational planes.
  transport:
    description: Session-based secure channels between Harmony nodes/tools.
    handshake:
      pattern: KEM-based ephemeral: ML-KEM-768 (server static pubkey) + optional X25519 (hybrid)
      pfs: true  # re-key on interval or message-count thresholds
      transcript_binding: SHA3-256
      identity_proof: ML-DSA-2 signatures over handshake transcripts
    rekey:
      after_messages: 10000
      after_seconds: 3600
  at_rest:
    description: File/object envelopes with authenticated encryption + metadata.
    envelope_format: QSE1  # QSecure Envelope v1
    aead: XChaCha20-Poly1305
    header_digest: SHA3-256
    associated_data:
      - file_path_hint
      - created_at
      - glyph_context   # optional symbolic context string
    compression: none  # leave to outer pipeline; avoid CRIME/BREACH-style pitfalls

hybrid_operation:
  enabled: true
  rationale: Smooth migration and defense-in-depth during PQ rollout.
  key_agreement: "KDF( concat( KEM_pq_shared, DH_classical_shared ) )"
  signatures: "Attach ML-DSA-2 sig; optionally dual-sign with Ed25519 for legacy verifiers."
  deprecation_plan:
    classical_signing: review at v0.4
    classical_kex: review at v0.5

key_lifecycle:
  identities:
    - id: qsecure-root
      role: root signing identity for releases/artifacts
      scheme: ML-DSA-2
    - id: qsecure-node-<host>
      role: node handshake/transport
      scheme: ML-DSA-2 + ML-KEM-768 (pubkey)
  storage:
    private_keys: OS keychain or encrypted keystore (not in git)
    public_keys: Codex/Keys/*.pub.yaml (safe to track)
  rotation:
    transport_keys_days: 90
    signing_keys_days: 365
  revocation:
    method: CRL sidecar (Codex/Keys/revocations.yaml) + signed bulletin in Chronicle

symbolic_bindings:
  # Mapping cryptographic events to Harmony glyph semantics.
  glyphs:
    entangle: G-Ω-21         # Rooted Growth → long-lived trust
    veil: G-Θ-05             # Protective shroud → aead encryption
    lattice: G-Ξ-04          # Lattice structure → PQ KEM rationale
    twin-seal: G-Φ-03        # Dual signature (hybrid) seal
    renewal: G-Ω-17          # Rekey events
  aura_tags:
    - name: "li-audit"
      when: FCP.active == true
      effect: "include regulator-friendly transcript digest"
    - name: "wu-wei"
      when: FCP.active == false
      effect: "suppress verbose logs; minimal headers only"

envelope_QSE1:
  magic: "QSE1"
  header:
    version: 1
    mode: ["at_rest","transport_export"]
    created_at: ISO8601-UTC
    sender_id: string         # e.g., qsecure-node-Aletheia
    recipients:
      - id: string            # logical recipient id
        kem_pubkey_fp: hex32  # SHA3-256 fingerprint of ML-KEM pubkey
        enc_key_material: base64  # KEM ciphertext
    hybrid:
      classical_dh_fp: hex32?  # optional: X25519 pub fp
    aead:
      alg: XChaCha20-Poly1305
      nonce: base64(24)
      ad: base64  # serialized associated_data (deterministic order)
    hash:
      alg: SHA3-256
      header_digest: hex32
  body: base64  # ciphertext
  signatures:
    - alg: ML-DSA-2
      signer: id
      sig: base64
    - alg: Ed25519
      signer: id
      sig: base64
  footer:
    notes: optional string
    glyph_context: optional string

api_plan:
  python:
    package: harmony_qsecure
    modules:
      - qsecure/envelope.py     # load/save QSE1
      - qsecure/kem.py          # ML-KEM / hybrid
      - qsecure/sign.py         # ML-DSA / Ed25519
      - qsecure/aead.py         # AEAD wrapper
      - qsecure/keys.py         # keygen, fingerprints, keystore IO
      - qsecure/cli.py          # bin/qsecure shim
    functions:
      - qsecure.seal(input_path, recipients, out_path, ad?, glyph_context?)
      - qsecure.open(input_path, key_resolver, out_path?)
      - qsecure.sign(path, identity)
      - qsecure.verify(path, required_alg="ML-DSA-2")
      - qsecure.keygen(identity_id, scheme="ML-DSA-2|ML-KEM-768|hybrid")
  cli:
    commands:
      - qsecure keygen --id NODE-A --scheme hybrid
      - qsecure seal --in file.yaml --to NODE-B --out file.qse
      - qsecure open --in file.qse --out file.yaml
      - qsecure sign --in report.txt --id qsecure-root
      - qsecure verify --in report.txt

interoperability:
  glyphcrypt_bridge:
    description: >
      QSecure can wrap/unwrap GlyphCrypt payloads. Recommended order:
      inner: GlyphCrypt (symbolic transform) → outer: QSecure (PQ envelope).
    modes:
      - wrap_glyphcrypt: true
      - unwrap_glyphcrypt: true
    caution: >
      Avoid double-compression. Keep headers minimal to preserve semantic diffs.

policies:
  logging:
    levels: [none, minimal, verbose]
    default: minimal
    fcp_activation:
      add_audit_digest: true
      regulator_template: "Confucian-Audit-v1"
  metadata_minimization:
    redact_sender: false   # can be toggled per environment
    redact_notes: true

test_vectors:
  # Placeholders; fill once libs are wired in.
  kem_roundtrip:
    alg: ML-KEM-768
    ciphertext_len: "TBD"
    shared_secret_len: "TBD"
  aead_roundtrip:
    alg: XChaCha20-Poly1305
    nonce_len: 24
    tag_len: 16
  signature_sample:
    alg: ML-DSA-2
    message_digest: "SHA3-256: …"
    sig_len: "TBD"

security_considerations:
  - Ensure constant-time implementations; prefer vetted libs.
  - Protect private keys with OS keystore or passphrase KDF (Argon2id).
  - Rekey regularly; enable hybrid until org-wide PQ readiness is confirmed.
  - Do not commit private keys; only public descriptors in Codex/Keys/.

rollout_plan:
  phase_1:
    deliverables:
      - YAML spec (this file)
      - CLI skeleton (qsecure) stubs
      - Python API scaffolding
    success_criteria:
      - Envelope parse/emit; hashing; headers snapshot
  phase_2:
    deliverables:
      - PQ KEM + AEAD seal/open
      - ML-DSA signing/verification
      - Hybrid key agreement
    success_criteria:
      - Golden test vectors; CI green
  phase_3:
    deliverables:
      - Transport handshake integration
      - GlyphCrypt bridge
      - FCP audit hooks
    success_criteria:
      - End-to-end node sync with PQ protection

file_conventions:
  extensions:
    envelope: .qse
    public_key: .pub.yaml
  directories:
    keys_public: Codex/Keys/
    docs: Codex/System/

examples:
  envelope_header_minimal:
    magic: "QSE1"
    header:
      version: 1
      mode: "at_rest"
      created_at: "2025-08-28T12:00:00Z"
      sender_id: "qsecure-node-Aletheia"
      recipients:
        - id: "HarmonyNode01"
          kem_pubkey_fp: "7f8a…c2"
          enc_key_material: "BASE64…"
      aead:
        alg: "XChaCha20-Poly1305"
        nonce: "BASE64_NONCE"
        ad: "BASE64_AD"
      hash:
        alg: "SHA3-256"
        header_digest: "abcd…"
    signatures: []

notes:
  - This spec is cryptography-agnostic at the code layer; swap-in PQ libraries as available.
  - Keep hybrid enabled until all verifiers support ML-DSA.
